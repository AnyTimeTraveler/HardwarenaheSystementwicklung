NAME game

SEG_MAIN SEGMENT CODE

EXTRN CODE (DAT_LEVEL_TICKS, DAT_TETRIS_PIECES, PFUN_SETUP_TIMERS, PFUN_DETECT_BAUDRATE)
EXTRN DATA (SCREEN_REFRESH_CURRENT_ROW, CURRENT_PIECE_INDEX)
EXTRN DATA (CURRENT_PIECE_ROT_INDEX, CURRENT_PIECE_V_POS, CURRENT_PIECE_H_POS)
EXTRN DATA (CP, GAMETICK_SUB_COUNTER, CURRENT_LEVEL, CURRENT_PIECE_DECOMPRESSED)
EXTRN IDATA (GAMESCREEN, COLOURMAP, STACK)
EXTRN DATA (PIECE_SIZE)
EXTRN BIT (BIT_CURRENT_COLOR, LED)



PFUN_RESET_GAME:
    ; Reset the screen driver row
    MOV SCREEN_REFRESH_CURRENT_ROW, #0
    MOV CURRENT_LEVEL, #0
    ; Put first piece on the screen
    MOV CURRENT_PIECE_INDEX, #5
    MOV CURRENT_PIECE_ROT_INDEX, #0
    CALL FUN_DECOMPRESS_PIECE
    MOV CURRENT_PIECE_V_POS, #0
    CALL FUN_ADD_PIECE
    CALL FUN_ADD_PIECE_COLOR


SEG_BOARD_FUNCS SEGMENT CODE

RSEG SEG_BOARD_FUNCS

FUN_SELECT_NEXT_PIECE:
    MOV A, CURRENT_PIECE_INDEX
    INC A
    CJNE A, #7, STORE_NEXT_PIECE
    MOV A, #0
STORE_NEXT_PIECE:
    MOV CURRENT_PIECE_INDEX, A
    JB BIT_CURRENT_COLOR, CURRENT_COLOR_SET
    SETB BIT_CURRENT_COLOR
    RET
CURRENT_COLOR_SET:
    CLR BIT_CURRENT_COLOR
    RET

PUBLIC FUN_CLEAR

FUN_CLEAR:
    MOV R0, #GAMESCREEN
    MOV @R0, #0xFF
    INC R0
    MOV @R0, #0xAA
    INC R0
DRAW_CLEAR:
    MOV @R0, #0x00
    INC R0
    CJNE R0, #GAMESCREEN_END + 1, DRAW_CLEAR
    RET

FUN_FILL:
    MOV R0, #GAMESCREEN
DRAW_FILL:
    MOV @R0, #0xFF
    INC R0
    CJNE R0, #GAMESCREEN_END + 1, DRAW_FILL
    MOV R0, #COLOURMAP
DRAW_FILL_COLOR:
    MOV @R0, #0xAA
    INC R0
    CJNE R0, #COLOURMAP + 0x40, DRAW_FILL_COLOR
    RET



FUN_DRAW_BACKGROUND:
    MOV R6, #31
    MOV R0, #GAMESCREEN
DRAW_SIDES:
    MOV @R0, #0x80
    INC R0
    MOV @R0, #0x01
    INC R0
    DJNZ R6, DRAW_SIDES
    MOV @R0, #0xFF
    INC R0
    MOV @R0, #0xFF
    RET

PUBLIC PFUN_RESET_GAME

PFUN_RESET_GAME:
    MOV GAMESTATE, #GS_PLAYING
    JMP FUN_DRAW_BACKGROUND

SEG_GAMETICK SEGMENT CODE

PUBLIC PJMPI_SUB_GAMETICK

RSEG SEG_GAMETICK
PJMPI_SUB_GAMETICK:
    SETB P1.3
    ; Reload with DF76
    ; for 200 Interrupts per Second
    ; Actually, reload with D20C
    ; for one tick every 7 ms (one gametick on lv 15) and scale from there
    MOV TH1, #0xD2
    MOV TL1, #0x0C

    PUSH PSW
    CLR RS0
    CLR RS1
    USING 0

    ; decrement gametick subcounter
    DEC GAMETICK_SUB_COUNTER
    MOV A, GAMETICK_SUB_COUNTER
    ; check if sub counter has been reached
    JNZ SUB_GAMETICK_RETURN

    ; load max ticks for current level
    MOV DPTR, #DAT_LEVEL_TICKS
    MOV A, CURRENT_LEVEL
    MOVC A, @A + DPTR
    MOV GAMETICK_SUB_COUNTER, A

    CALL FUN_ACT_ON_GAMESTATE

SUB_GAMETICK_RETURN:
    POP PSW
    CLR P1.3
    RETI

EXTRN CODE (GS_PRE_GAME, GS_PLAYING, GS_ROW_CLEARING, GS_LOST)
EXTRN DATA (GAMESTATE)

FUN_ACT_ON_GAMESTATE:
    MOV R1, GAMESTATE
    CJNE R1, #GS_PRE_GAME, TEST_GS_PLAYING
    CALL FUN_SIMULATE_PLAYER_INPUT
    JMP PFUN_GAMETICK
TEST_GS_PLAYING:
    CJNE R1, #GS_PLAYING, TEST_GS_ROW_CLEARING
    JMP PFUN_GAMETICK
TEST_GS_ROW_CLEARING:
    CJNE R1, #GS_ROW_CLEARING, TEST_GS_LOST
    MOV GAMESTATE, #GS_PLAYING
    ; todo slowly clear row
    JMP PFUN_GAMETICK
TEST_GS_LOST:
    CJNE R1, #GS_LOST, INVALID_GAMESTATE
    ; do nothing?
INVALID_GAMESTATE:
    RET


PUBLIC PFUN_GAMETICK

PFUN_GAMETICK:
    ; remove the piece from the board
    CALL FUN_REMOVE_PIECE
MOVE_PIECE_DOWN:
    INC CURRENT_PIECE_V_POS
    CALL FUN_CHECK_COLLISION
    JNC CAN_MOVE_DOWN
    DEC CURRENT_PIECE_V_POS
    MOV A, CURRENT_PIECE_V_POS
    CJNE A, #0, STILL_ROOM
    ; when we arrive here, the game has been lost
    ; stop new pieces from spawning
    ; TODO: switch gamestate (also todo) to end
    CALL FUN_DRAW_BACKGROUND
    RET
STILL_ROOM:
    CALL FUN_ADD_PIECE
    CALL FUN_ADD_PIECE_COLOR
    CALL FUN_FIND_FULL_ROW
    JNC NO_ROW_FILLED
    ; R1 now contains the filled row adress (left/first byte)
    PUSH AR1
    CALL FUN_MOVE_ROWS_DOWN
    POP AR1
    CALL FUN_MOVE_ROWS_DOWN_COLOR
NO_ROW_FILLED:
    MOV CURRENT_PIECE_V_POS, #0
    CALL FUN_SELECT_NEXT_PIECE
    CALL FUN_DECOMPRESS_PIECE
CAN_MOVE_DOWN:
    CALL FUN_ADD_PIECE
    CALL FUN_ADD_PIECE_COLOR
    RET


SEG_SIMULATION SEGMENT CODE

RSEG SEG_SIMULATION

FUN_SIMULATE_PLAYER_INPUT:
    MOV A, TL0
    JNB ACC.2, SET_RIGHT
    CALL PFUN_MOVE_LEFT
SET_RIGHT:
    JNB ACC.1, SET_ROT_LEFT
    CALL PFUN_MOVE_RIGHT
SET_ROT_LEFT:
    JNB ACC.0, SET_END
    CALL PFUN_ROTATE_RIGHT
SET_END:
    RET


PUBLIC PFUN_MOVE_LEFT, PFUN_MOVE_RIGHT, PFUN_ROTATE_RIGHT

PFUN_MOVE_LEFT:
    CALL FUN_REMOVE_PIECE
    CALL FUN_SHIFT_PIECE_LEFT
    CALL FUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL FUN_SHIFT_PIECE_RIGHT
    JMP KBD_RETURN


PFUN_MOVE_RIGHT:
    CALL FUN_REMOVE_PIECE
    CALL FUN_SHIFT_PIECE_RIGHT
    CALL FUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL FUN_SHIFT_PIECE_LEFT
    JMP KBD_RETURN


PFUN_ROTATE_RIGHT:
    CALL FUN_REMOVE_PIECE
    CALL FUN_ROTATE_PIECE_RIGHT
    CALL FUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL FUN_ROTATE_PIECE_LEFT
    JMP KBD_RETURN

KBD_RETURN:
    CALL FUN_ADD_PIECE
    CALL FUN_ADD_PIECE_COLOR
    RET

END
