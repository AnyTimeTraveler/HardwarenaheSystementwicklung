NAME game

SEG_GAME_LOGIC SEGMENT CODE

; EXTRN CODE (DAT_LEVEL_TICKS, DAT_TETRIS_PIECES, PFUN_SETUP_TIMERS, PFUN_DETECT_BAUDRATE)
; EXTRN DATA (SCREEN_REFRESH_CURRENT_ROW, CURRENT_PIECE_INDEX)
; EXTRN DATA (CURRENT_PIECE_ROT_INDEX, CURRENT_PIECE_V_POS, CURRENT_PIECE_H_POS)
; EXTRN DATA (CP, GAMETICK_SUB_COUNTER, CURRENT_LEVEL, CURRENT_PIECE_DECOMPRESSED)
; EXTRN IDATA (GAMESCREEN, COLOURMAP, STACK)

JEQ MACRO REGISTER, VALUE, FUNCTION
LOCAL   NOT_EQUAL
    CJNE REGISTER, #VALUE, NOT_EQUAL
    CALL FUNCTION
    JMP PJMP_GAMELOOP
NOT_EQUAL:
    NOP
ENDM

EXTRN CODE (PFUN_SERIAL_WRITE, PFUN_DECOMPRESS_PIECE, PFUN_ADD_PIECE, PFUN_ADD_PIECE_COLOR, PFUN_CHECK_COLLISION, PFUN_FIND_FULL_ROW)
EXTRN CODE (PFUN_MOVE_ROWS_DOWN, PFUN_MOVE_ROWS_DOWN_COLOR, PFUN_ROTATE_PIECE_LEFT, PFUN_ROTATE_PIECE_RIGHT)
EXTRN CODE (PFUN_REMOVE_PIECE, PFUN_SHIFT_PIECE_LEFT, PFUN_SHIFT_PIECE_RIGHT)
EXTRN CODE (DAT_LEVEL_TICKS)
EXTRN DATA (GAMESTATE, CURRENT_LEVEL, CURRENT_PIECE_INDEX, CURRENT_PIECE_ROT_INDEX, CURRENT_PIECE_V_POS)
EXTRN NUMBER (GS_FIRST_RUN, GS_PRE_GAME, GS_PLAYING, GS_ROW_CLEARING, GS_LOST)
EXTRN BIT (BIT_RUN_GAMETICK, BIT_CURRENT_COLOR)
PUBLIC PJMP_GAMELOOP, PFUN_MOVE_LEFT, PFUN_MOVE_RIGHT, PFUN_ROTATE_RIGHT, PFUN_RESET_GAME

RSEG SEG_GAME_LOGIC
PJMP_GAMELOOP:
    ; wait for the next gametick
    JNB BIT_RUN_GAMETICK, $
    CLR BIT_RUN_GAMETICK

    MOV R1, GAMESTATE
    JEQ R1, GS_FIRST_RUN, PFUN_RESET_GAME
    JEQ R1, GS_PRE_GAME, FUN_PRE_GAME_GAMETICK
    JEQ R1, GS_PLAYING, FUN_GAMETICK
    JEQ R1, GS_ROW_CLEARING, FUN_ANIMATE_ROW_CLEARING
    JEQ R1, GS_LOST, FUN_ANIMATE_GAME_END

    MOV A, #0xDE
    CALL PFUN_SERIAL_WRITE
    MOV A, R1
    CALL PFUN_SERIAL_WRITE

    JMP PJMP_GAMELOOP


FUN_GAME_LOST:
    MOV GAMESTATE, #GS_LOST
    RET

PFUN_RESET_GAME:
    ; set level to idle animation interval
    MOV CURRENT_LEVEL, #0
    MOV GAMESTATE, #GS_PRE_GAME
    RET

FUN_PRE_GAME_GAMETICK:
    CALL FUN_START_GAME
    RET

FUN_ANIMATE_ROW_CLEARING:
    RET

FUN_ANIMATE_GAME_END:
    RET

FUN_START_GAME:
    MOV CURRENT_LEVEL, #1
    ; Put first piece on the screen
    MOV CURRENT_PIECE_INDEX, #5
    MOV CURRENT_PIECE_ROT_INDEX, #0
    CALL PFUN_DECOMPRESS_PIECE
    MOV CURRENT_PIECE_V_POS, #0
    CALL PFUN_ADD_PIECE
    CALL PFUN_ADD_PIECE_COLOR

    MOV GAMESTATE, #GS_PLAYING
    RET

FUN_SELECT_NEXT_PIECE:
    MOV A, CURRENT_PIECE_INDEX
    INC A
    CJNE A, #7, STORE_NEXT_PIECE
    MOV A, #0
STORE_NEXT_PIECE:
    MOV CURRENT_PIECE_INDEX, A
    JB BIT_CURRENT_COLOR, CURRENT_COLOR_SET
    SETB BIT_CURRENT_COLOR
    RET
CURRENT_COLOR_SET:
    CLR BIT_CURRENT_COLOR
    RET


FUN_GAMETICK:
    ; remove the piece from the board
    CALL PFUN_REMOVE_PIECE
MOVE_PIECE_DOWN:
    INC CURRENT_PIECE_V_POS
    CALL PFUN_CHECK_COLLISION
    JNC CAN_MOVE_DOWN
    DEC CURRENT_PIECE_V_POS
    MOV A, CURRENT_PIECE_V_POS
    CJNE A, #0, STILL_ROOM
    CALL FUN_GAME_LOST
    RET
STILL_ROOM:
    CALL PFUN_ADD_PIECE
    CALL PFUN_ADD_PIECE_COLOR
    CALL PFUN_FIND_FULL_ROW
    JNC NO_ROW_FILLED
    INC CURRENT_LEVEL
    ; R1 now contains the filled row adress (left/first byte)
    MOV B, R1
    CALL PFUN_MOVE_ROWS_DOWN
    MOV R1, B
    CALL PFUN_MOVE_ROWS_DOWN_COLOR
NO_ROW_FILLED:
    MOV CURRENT_PIECE_V_POS, #0
    CALL FUN_SELECT_NEXT_PIECE
    CALL PFUN_DECOMPRESS_PIECE
CAN_MOVE_DOWN:
    CALL PFUN_ADD_PIECE
    CALL PFUN_ADD_PIECE_COLOR
    RET


PFUN_MOVE_LEFT:
    CALL PFUN_REMOVE_PIECE
    CALL PFUN_SHIFT_PIECE_LEFT
    CALL PFUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL PFUN_SHIFT_PIECE_RIGHT
    JMP KBD_RETURN


PFUN_MOVE_RIGHT:
    CALL PFUN_REMOVE_PIECE
    CALL PFUN_SHIFT_PIECE_RIGHT
    CALL PFUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL PFUN_SHIFT_PIECE_LEFT
    JMP KBD_RETURN


PFUN_ROTATE_RIGHT:
    CALL PFUN_REMOVE_PIECE
    CALL PFUN_ROTATE_PIECE_RIGHT
    CALL PFUN_CHECK_COLLISION
    ; check if no collision
    JNC KBD_RETURN
    ; otherwise undo
    CALL PFUN_ROTATE_PIECE_LEFT
    JMP KBD_RETURN

KBD_RETURN:
    CALL PFUN_ADD_PIECE
    CALL PFUN_ADD_PIECE_COLOR
    RET

END
