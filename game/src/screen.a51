NAME screen

SEG_REFRESH_SCREEN SEGMENT CODE

EXTRN DATA (SCREEN_REFRESH_CURRENT_ROW, SCREEN_START)
EXTRN XDATA (LED_MATRIX_0, LED_MATRIX_1, LED_MATRIX_2)
EXTRN CODE (PFUN_SERIAL_WRITE)
EXTRN BIT (OUT_SCREEN)
PUBLIC PJMPI_REFRESH_SCREEN

RSEG SEG_REFRESH_SCREEN
PJMPI_REFRESH_SCREEN:
    PUSH PSW
    SETB RS0
    USING 1
    SETB OUT_SCREEN
    ; Software reload
    MOV TL0, #0x48
    MOV TH0, #0xF4

    MOV R7, SCREEN_REFRESH_CURRENT_ROW
    CALL FUN_REFRESH_SCREEN_ROW
    INC R7
    CJNE R7, #8, RETURN
    MOV R7, #0
RETURN:
    MOV SCREEN_REFRESH_CURRENT_ROW, R7
    ; Keine Instruktion. Der Assembler muss auch wissen,
    ; dass ab hier die Registerbank 0 verwendet wird.
    CLR OUT_SCREEN
    POP PSW
    RETI

DRAW_SEGMENT_COLOR MACRO OFFSET
    MOV R1, #GAMESCREEN_0 + OFFSET
    MOV R0, #GAMESCREEN_1 + OFFSET
    CALL FUN_REFRESH_MODULE_COLOR
ENDM

DRAW_BIT MACRO BITINDEX
LOCAL WRITE ON
    JB BITINDEX, ON
    MOV A, #0x00
    JMP WRITE
ON:
    MOV A, #0xFF
WRITE:
    MOVX @DPTR, A
    INC DPTR
ENDM

ENABLE_LINE MACRO
    MOV A, R7
    ORL A, #0x08
    MOVX @DPTR, A
    INC DPTR
ENDM

LOAD_LINE MACRO
    MOV A, @R0
    MOV B, A
    INC R0
ENDM

; Send a new batch of data to each segment
; PARAM R7 Current line (preserved)
FUN_REFRESH_SCREEN_ROW:
    ; load first line of the screen
    MOV A, SCREEN_START
    ; add the current line 3 times, since each line is 3 bytes long
    ADD A, R7
    ADD A, R7
    ADD A, R7
    ; load into R0 for indirect data access
    MOV R0, A

    MOV DPTR, #LED_MATRIX_0
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    MOV A, R0
    ADD A, #5
    MOV R0, A
    REPT 9
        INC DPTR
    ENDM
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    MOV A, R0
    ADD A, #5
    MOV R0, A


    MOV DPTR, #LED_MATRIX_1
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    MOV A, R0
    ADD A, #5
    MOV R0, A
    REPT 9
        INC DPTR
    ENDM
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    MOV A, R0
    ADD A, #5
    MOV R0, A



    MOV DPTR, #LED_MATRIX_2
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    MOV A, R0
    ADD A, #5
    MOV R0, A
    REPT 9
        INC DPTR
    ENDM
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE
    LOAD_LINE
    DRAW_BIT B.0
    DRAW_BIT B.1
    DRAW_BIT B.2
    DRAW_BIT B.3
    DRAW_BIT B.4
    DRAW_BIT B.5
    DRAW_BIT B.6
    DRAW_BIT B.7
    ENABLE_LINE



    ; DRAW_SEGMENT 1,0
    ; DRAW_SEGMENT 1,16
    ; DRAW_SEGMENT 1,32
    ; DRAW_SEGMENT 1,48
    ; DRAW_SEGMENT 1,1
    ; DRAW_SEGMENT 1,17
    ; DRAW_SEGMENT 1,33
    ; DRAW_SEGMENT 1,49
    ; MOV DPTR, #LED_MATRIX_2
    ; DRAW_SEGMENT 2,0
    ; DRAW_SEGMENT 2,16
    ; DRAW_SEGMENT 2,32
    ; DRAW_SEGMENT 2,48
    ; DRAW_SEGMENT 2,1
    ; DRAW_SEGMENT 2,17
    ; DRAW_SEGMENT 2,33
    ; DRAW_SEGMENT 2,49
    RET

; RARAM R1 Gamescreen
; PARAM R6 Row-Bitmask
; PARAM R7 Current line (preserved)
FUN_REFRESH_MODULE:
    MOV R5, #8
    MOV A, @R1
RF_LOOP:
    ; check if there is a pixel
    MOV A, @R1
    ANL A, R6
    JZ PIXEL_OFF
PIXEL_ON:
    MOV A, #0xFF
    JMP RF_WRITE
PIXEL_OFF:
    MOV A, #0x00
RF_WRITE:
    MOVX @DPTR, A
    INC R1
    INC R1
    INC DPTR
    DJNZ R5, RF_LOOP
    MOV A, R7
    ORL A, #0x08
    MOVX @DPTR, A
    INC DPTR
    RET

; RARAM R1 Gamescreen
; PARAM R6 Row-Bitmask
; PARAM R7 Current line (preserved)
FUN_REFRESH_MODULE_COLOR:
    MOV R5, #8
RFC_LOOP:
    ; check if there is a pixel
    MOV A, @R1
    ANL A, R6
    JZ RFC_PIXEL_OFF
RFC_PIXEL_ON:
    MOV A, @R0
    ANL A, R6
    JZ RFC_GREEN
RFC_RED:
    MOV A, #0x0F
    JMP RFC_WRITE
RFC_GREEN:
    MOV A, #0xF0
    JMP RFC_WRITE
RFC_PIXEL_OFF:
    MOV A, #0x00
RFC_WRITE:
    MOVX @DPTR, A
    INC R1
    INC R1
    INC R0
    INC R0
    INC DPTR
    DJNZ R5, RFC_LOOP
    MOV A, R7
    ORL A, #0x08
    MOVX @DPTR, A
    INC DPTR
    RET

END
