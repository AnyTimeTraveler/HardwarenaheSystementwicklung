NAME keyboard

SEG_KEYBOARD SEGMENT CODE

EXTRN BIT (BIT_KEYBOARD_BREAK, BIT_RUN_GAMETICK)
EXTRN CODE (PFUN_MOVE_LEFT, PFUN_MOVE_RIGHT, PFUN_ROTATE_RIGHT, PFUN_RESET_GAME, PFUNI_GAMETICK, PFUN_START_GAME)
EXTRN NUMBER (KDB_EXTENDED, KDB_BREAK, KDB_KEY_LEFT_ARROW, KDB_KEY_RIGHT_ARROW, KDB_KEY_UP_ARROW, KDB_KEY_DOWN_ARROW, KDB_KEY_R, KDB_KEY_SPACE)
PUBLIC PJMPI_KEYBOARD_ISR

RSEG SEG_KEYBOARD
PJMPI_KEYBOARD_ISR:
    PUSH PSW
    SETB RS0
    USING 1
    MOV A, SBUF
    CLR RI
    ; ignore the E0 byte
    CJNE A, #KDB_EXTENDED, NOT_E0
    JMP RETURN

NOT_E0:
    ; check for a break byte
    CJNE A, #KDB_BREAK, NOT_BREAK
    ; set the break bit to ignore break keystorkes
    SETB BIT_KEYBOARD_BREAK
    JMP RETURN

NOT_BREAK:
    ; it's not a break, so check the break flag, if that is true then ignore the keypress
    JB BIT_KEYBOARD_BREAK, UNSET_BREAK
    ; it's a make byte, so get the key pressed

CHECK_LEFT:
    CJNE A, #KDB_KEY_LEFT_ARROW, CHECK_RIGHT
    CALL PFUN_MOVE_LEFT
    JMP RETURN
CHECK_RIGHT:
    CJNE A, #KDB_KEY_RIGHT_ARROW, CHECK_UP
    CALL PFUN_MOVE_RIGHT
    JMP RETURN
CHECK_UP:
    CJNE A, #KDB_KEY_UP_ARROW, CHECK_DOWN
    CALL PFUN_ROTATE_RIGHT
    JMP RETURN
CHECK_DOWN:
    CJNE A, #KDB_KEY_DOWN_ARROW, CHECK_R
    CALL PFUNI_GAMETICK
    JMP RETURN
CHECK_R:
    CJNE A, #KDB_KEY_R, CHECK_SPACE
    CALL PFUN_RESET_GAME
    JMP RETURN
CHECK_SPACE:
    CJNE A, #KDB_KEY_SPACE, RETURN
    CALL PFUN_START_GAME
    JMP RETURN

UNSET_BREAK:
    CLR BIT_KEYBOARD_BREAK
RETURN:
    POP PSW
    RETI

END
